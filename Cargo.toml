[package]
name = "yap"
version = "4.8.1"
edition = "2021"
build = "build.rs"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[package.metadata.winres]
LegalCopyright = "Copyright Alex-Beng Â© 2024"
FileDescription = "Yap for Genshin"

[dependencies]
pyo3 = { version = "0.22.2", features = ["extension-module"] }
image = "0.25.1"
imageproc = "0.25.0"
rayon = "1.5.1"
serde_json = "1.0.68"
serde = { version = "1.0.130", features = ["derive"]}
reqwest = { version = "0.12.5", features = ["blocking", "json"] }
log = "0.4.14"
tract-onnx = "0.21.5"
env_logger = "0.11.3"
enigo = "0.2.1"
clap = "2.33.3"
semver = "1.0.7"
hotkey = "0.3.1"
rand = "0.8"
log4rs = "0.11.0"


[target.'cfg(windows)'.dependencies]
winapi = { version = "0.3.9", features = ["errhandlingapi", "winuser", "winbase", "wingdi", "winnt", "securitybaseapi", "libloaderapi", "shellscalingapi"] }

# always use target build-dependencies for winres so that
# it won't get pulled for non-windows OSs (saves them resources)
[build-dependencies]
winres = "0.1.12"

[profile.release]
panic = "abort"
strip = true
codegen-units = 4

[lib]
# The name of the native library. This is the name which will be used in Python to import the
# library (i.e. `import string_sum`). If you change this, you must also change the name of the
# `#[pymodule]` in `src/lib.rs`.
name = "yap"
# "cdylib" is necessary to produce a shared library for Python to import from.
#
# Downstream Rust code (including code in `bin/`, `examples/`, and `tests/`) will not be able
# to `use string_sum;` unless the "rlib" or "lib" crate type is also included, e.g.:
# crate-type = ["cdylib", "rlib"]
crate-type = ["cdylib"]